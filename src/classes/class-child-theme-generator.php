<?php

namespace GenesisPlugins\GenesisCustomizer;

/**
 * Class Generate_Child_Theme
 */
class Child_Theme_Generator {

	/**
	 * Sets up class.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function boot() {
		add_action( 'admin_menu', [ $this, 'add_menu_item' ], 999 );
		add_action( 'admin_post_create', [ $this, 'process_create_form' ] );

		if ( basename( $_SERVER['PHP_SELF'] ) === 'themes.php' && ! empty( $_REQUEST['ctcm_status'] ) ) {
			add_action( 'admin_notices', [ $this, 'showErrorNotice' ] );
		}
	}

	/**
	 * Adds admin settings menu item.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function add_menu_item() {
		add_submenu_page(
			'genesis',
			esc_html__( 'Generate Child Theme', 'generate-child-theme' ),
			esc_html__( 'Generate Child Theme', 'generate-child-theme' ),
			'install_themes', //capability needed
			'generate-child-theme', //menu slug (and page query url)
			[ $this, 'admin_page' ]
		);
	}

	/**
	 * Adds admin settings page.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function admin_page() {
		if ( ! current_user_can( 'install_themes' ) ) {
			wp_die( esc_html__( 'You do not have sufficient permissions to access this page.', 'generate-child-theme' ) );
		}

		require_once _get_path() . 'assets/views/child-theme-generator.php';
	}

	/**
	 * Process settings page.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function process_create_form() {
		if ( ! empty( $_POST ) ) {
			$info                          = [];
			$info['parent_theme_template'] = sanitize_text_field( $_POST['parent_template'] );
			$info['theme_name']            = sanitize_text_field( $_POST['child_theme_name'] );
			$info['theme_description']     = empty( $_POST['child_theme_description'] ) ? 'Your description goes here' : sanitize_text_field( stripslashes( $_POST['child_theme_description'] ) );
			$info['theme_author']          = sanitize_text_field( $_POST['child_theme_author'] );
			$info['theme_version']         = empty( $_POST['child_theme_version'] ) ? '1.0' : sanitize_text_field( $_POST['child_theme_version'] );
			//$info['screenshot']            = $this->sanitize_image( $_POST['child_theme_screenshot'] );

			//$uploadedfile = $_FILES['child_theme_screenshot'];

			$upload_overrides = array( 'test_form' => false );

			$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

			if ( $movefile && ! isset( $movefile['error'] ) ) {
				echo "File is valid, and was successfully uploaded.\n";
				var_dump( $movefile );
			} else {
				/**
				 * Error generated by _wp_handle_upload()
				 *
				 * @see _wp_handle_upload() in wp-admin/includes/file.php
				 */
				echo $movefile['error'];
			}

			$result = $this->make_child_theme( $info );

			if ( is_wp_error( $result ) ) {
				// should show create child form again
				$this->_redirect(
					admin_url( 'themes.php?page=generate-child-theme' ),
					$result->get_error_message(),
					[
						'theme_name'    => $info['theme_name'],
						'description'   => $info['theme_description'],
						'author_name'   => $info['theme_author'],
						'theme_version' => $info['theme_version']
					]
				);

				return;

			} else {
				switch_theme( $result['parent_template'], $result['new_child_theme'] );
				// Redirect to themes page on success
				$this->_redirect( admin_url( 'themes.php' ), 'child_created' );
			}
		}
	}

	/**
	 * Builds child theme.
	 *
	 * @since 1.0.0
	 *
	 * @return array
	 */
	public function make_child_theme( $info ) {
		$data                  = explode( ":", $info['parent_theme_template'] );
		$parent_theme_name     = $data[1];
		$parent_theme_template = $data[0];
		$theme_root            = get_theme_root();
		$parent_theme_dir      = $theme_root . '/' . $parent_theme_template;
		$theme_name            = $info['theme_name'];
		$description           = $info['theme_description'];
		$author                = $info['theme_author'];
		$version               = $info['theme_version'];
		//$screenshot            = $info['screenshot'];

		// Turn a theme name into a directory name
		$new_theme_name = sanitize_title( $theme_name );
		$theme_slug     = str_replace( '-', '_', $new_theme_name );

		$new_child_theme_path = $theme_root . '/' . $new_theme_name;

		if ( file_exists( $new_child_theme_path ) ) {
			wp_die( esc_html__( 'The directory already exists', 'generate-child-theme' ) );

			return;
		}

		mkdir( $new_child_theme_path );

		// Make style.css
		$css = "/**
		 * Theme Name: {$theme_name}
		 * Author: {$author}
		 * Description: {$description}
		 * Version: {$version}
		 * Template: genesis
		 * Tags: genesis-customizer
		 */";
		file_put_contents( $new_child_theme_path . '/style.css', $css );

		// Make functions.php
		$package          = str_replace( ' ', '', $theme_name );
		$function_content = "<?php
		/**
		 * {$theme_name}
		 *
		 * This file adds functions to the {$theme_name} theme.
		 *
		 * @package {$package}
		 * @author  {$author}
		 */";

		file_put_contents( $new_child_theme_path . '/functions.php', $function_content );

		// Copy screenshot
		if ( $screenshot_template = $this->get_screenshot( $parent_theme_dir ) ) {
			copy(
				$parent_theme_dir . '/' . $screenshot_template,
				$new_child_theme_path . '/' . $screenshot_template
			);
		} // removed grandfather screenshot check (use mshot instead, rly)

//		$screenshot_file = '';
//		file_put_contents( $new_child_theme_path, $screenshot );

		// Make child theme an allowed theme (network enable theme)
		$allowed_themes                    = get_site_option( 'allowedthemes' );
		$allowed_themes[ $new_theme_name ] = true;
		update_site_option( 'allowedthemes', $allowed_themes );

		return [
			'parent_template'       => $parent_theme_template,
			'parent_theme'          => $parent_theme_name,
			'new_child_theme'       => $new_theme_name,
			'new_child_theme_path'  => $new_child_theme_path,
			'new_child_theme_title' => $theme_name,
		];
	}

	/**
	 * Gets theme screenshot.
	 *
	 * @since 1.0.0
	 *
	 * @return bool|string
	 */
	public function get_screenshot( $directory ) {
		$screenshots = glob( $directory . '/screenshot.{png,jpg,jpeg,gif}', GLOB_BRACE );

		return ( empty( $screenshots ) ) ? false : basename( $screenshots[0] );
	}

	/**
	 * Redirects to correct page.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function _redirect( $url, $status, $args = [] ) {
		$args['ctcm_status'] = $status;
		$args                = urlencode_deep( $args );

		wp_redirect( add_query_arg( $args, $url ) );
	}

	/**
	 * Display error.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function showErrorNotice() {
		switch ( $_GET['ctcm_status'] ) {
			case 'child_created': //SUCCESS: child theme created
				$type = 'updated'; //fade?
				$msg  = sprintf(
					__( 'Theme switched! <a href="%s">Click here to edit the child stylesheet</a>.', 'generate-child-theme' ),
					add_query_arg(
						urlencode_deep( array(
							'file'  => 'style.css',
							'theme' => get_stylesheet(),
						) ),
						admin_url( 'theme-editor.php' )
					)
				);
				break;
			case 'create_failed': //ERROR: create file failed (probably due to permissions)
				$type = 'error';
				$msg  = sprintf(
					__( 'Failed to create file: %s', 'generate-child-theme' ),
					esc_html( $_GET['template'] )
				);
				break;
			default: //ERROR: it is a generic error message
				$type = 'error';
				$msg  = esc_html( $_GET['ctcm_status'] );
		}

		printf(
			'<div class="%s"><p>%s</p></div>',
			$type,
			$msg
		);
	}

	/**
	 * Check Image
	 *
	 * @since 0.1.0
	 */
	private function sanitize_image( $input ) {
		$default_output = '';
		$filetype       = wp_check_filetype( $input );
		$mime_type      = $filetype['type'];

		if ( strpos( $mime_type, 'image' ) !== false ) {
			$default_output = $input;
		}

		return $default_output;
	}

}
